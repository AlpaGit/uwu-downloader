// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Manifest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Manifest GetRootAsManifest(ByteBuffer _bb) { return GetRootAsManifest(_bb, new Manifest()); }
  public static Manifest GetRootAsManifest(ByteBuffer _bb, Manifest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Manifest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Fragment? Fragments(int j) { int o = __p.__offset(4); return o != 0 ? (Fragment?)(new Fragment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FragmentsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Manifest> CreateManifest(FlatBufferBuilder builder,
      VectorOffset fragmentsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Manifest.AddFragments(builder, fragmentsOffset);
    return Manifest.EndManifest(builder);
  }

  public static void StartManifest(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFragments(FlatBufferBuilder builder, VectorOffset fragmentsOffset) { builder.AddOffset(0, fragmentsOffset.Value, 0); }
  public static VectorOffset CreateFragmentsVector(FlatBufferBuilder builder, Offset<Fragment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFragmentsVectorBlock(FlatBufferBuilder builder, Offset<Fragment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFragmentsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Fragment>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFragmentsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Fragment>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFragmentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Manifest> EndManifest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Manifest>(o);
  }
  public ManifestT UnPack() {
    var _o = new ManifestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ManifestT _o) {
    _o.Fragments = new List<FragmentT>();
    for (var _j = 0; _j < this.FragmentsLength; ++_j) {_o.Fragments.Add(this.Fragments(_j).HasValue ? this.Fragments(_j).Value.UnPack() : null);}
  }
  public static Offset<Manifest> Pack(FlatBufferBuilder builder, ManifestT _o) {
    if (_o == null) return default(Offset<Manifest>);
    var _fragments = default(VectorOffset);
    if (_o.Fragments != null) {
      var __fragments = new Offset<Fragment>[_o.Fragments.Count];
      for (var _j = 0; _j < __fragments.Length; ++_j) { __fragments[_j] = Fragment.Pack(builder, _o.Fragments[_j]); }
      _fragments = CreateFragmentsVector(builder, __fragments);
    }
    return CreateManifest(
      builder,
      _fragments);
  }
}

public class ManifestT
{
  [Newtonsoft.Json.JsonProperty("fragments")]
  public List<FragmentT> Fragments { get; set; }

  public ManifestT() {
    this.Fragments = null;
  }
}

