// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Fragment : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Fragment GetRootAsFragment(ByteBuffer _bb) { return GetRootAsFragment(_bb, new Fragment()); }
  public static Fragment GetRootAsFragment(ByteBuffer _bb, Fragment obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Fragment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public File? Files(int j) { int o = __p.__offset(6); return o != 0 ? (File?)(new File()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FilesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Bundle? Bundles(int j) { int o = __p.__offset(8); return o != 0 ? (Bundle?)(new Bundle()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BundlesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Fragment> CreateFragment(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset filesOffset = default(VectorOffset),
      VectorOffset bundlesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Fragment.AddBundles(builder, bundlesOffset);
    Fragment.AddFiles(builder, filesOffset);
    Fragment.AddName(builder, nameOffset);
    return Fragment.EndFragment(builder);
  }

  public static void StartFragment(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddFiles(FlatBufferBuilder builder, VectorOffset filesOffset) { builder.AddOffset(1, filesOffset.Value, 0); }
  public static VectorOffset CreateFilesVector(FlatBufferBuilder builder, Offset<File>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFilesVectorBlock(FlatBufferBuilder builder, Offset<File>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFilesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<File>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFilesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<File>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBundles(FlatBufferBuilder builder, VectorOffset bundlesOffset) { builder.AddOffset(2, bundlesOffset.Value, 0); }
  public static VectorOffset CreateBundlesVector(FlatBufferBuilder builder, Offset<Bundle>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBundlesVectorBlock(FlatBufferBuilder builder, Offset<Bundle>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBundlesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Bundle>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBundlesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Bundle>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBundlesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Fragment> EndFragment(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Fragment>(o);
  }
  public FragmentT UnPack() {
    var _o = new FragmentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FragmentT _o) {
    _o.Name = this.Name;
    _o.Files = new List<FileT>();
    for (var _j = 0; _j < this.FilesLength; ++_j) {_o.Files.Add(this.Files(_j).HasValue ? this.Files(_j).Value.UnPack() : null);}
    _o.Bundles = new List<BundleT>();
    for (var _j = 0; _j < this.BundlesLength; ++_j) {_o.Bundles.Add(this.Bundles(_j).HasValue ? this.Bundles(_j).Value.UnPack() : null);}
  }
  public static Offset<Fragment> Pack(FlatBufferBuilder builder, FragmentT _o) {
    if (_o == null) return default(Offset<Fragment>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _files = default(VectorOffset);
    if (_o.Files != null) {
      var __files = new Offset<File>[_o.Files.Count];
      for (var _j = 0; _j < __files.Length; ++_j) { __files[_j] = File.Pack(builder, _o.Files[_j]); }
      _files = CreateFilesVector(builder, __files);
    }
    var _bundles = default(VectorOffset);
    if (_o.Bundles != null) {
      var __bundles = new Offset<Bundle>[_o.Bundles.Count];
      for (var _j = 0; _j < __bundles.Length; ++_j) { __bundles[_j] = Bundle.Pack(builder, _o.Bundles[_j]); }
      _bundles = CreateBundlesVector(builder, __bundles);
    }
    return CreateFragment(
      builder,
      _name,
      _files,
      _bundles);
  }
}

public class FragmentT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("files")]
  public List<FileT> Files { get; set; }
  [Newtonsoft.Json.JsonProperty("bundles")]
  public List<BundleT> Bundles { get; set; }

  public FragmentT() {
    this.Name = null;
    this.Files = null;
    this.Bundles = null;
  }
}

